/*
 * Java SMPP API
 * Copyright (C) 1998 - 2001 by Oran Kelly
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * A copy of the LGPL can be viewed at http://www.gnu.org/copyleft/lesser.html
 * Java SMPP API author: orank@users.sf.net
 * Java SMPP API Homepage: http://smppapi.sourceforge.net/
 */

package ie.omk.smpp.event;

import ie.omk.smpp.SmppConnection;

/** Event generated by the receiver thread exiting. This event will be generated
 * when the receiver thread terminates either normally or abnormally due to an
 * exception. In the former case, isException will return false. In the latter,
 * isException will return true and the Throwable object that was the cause of
 * the thread's termination can be accessed using {@link #getException}.
 * If an application receives this event, it can be assumed that the connection
 * to the SMSC is invalid. That is, the network-specific connection will have to
 * be reestablished before binding to the SMSC is again possible. It is up to
 * the application to do any necessary clean up to the old network connection.
 * @author Oran Kelly
 * @version 1.0
 */
public class ReceiverExitEvent extends SMPPEvent
{
    /** The exception that caused thread termination. */
    private Throwable exception = null;

    /** The state the SmppConnection was in when the thread exited. */
    private int connectionState = 0;


    /** Create a new ReceiverExitEvent. Events created with this constructor
     * will signify a normal receiver thread termination with no errors.
     * @param source the source SmppConnection of this event.
     */
    public ReceiverExitEvent(SmppConnection source)
    {
	super (RECEIVER_EXIT, source);
    }

    /** Create a new ReceiverExitEvent. If <code>t</code> is not null, the newly
     * created event will represent an abnormal termination of the receiver
     * thread. If <code>t</code> is null, this constructor has the same effect
     * as {@link #ReceiverExitEvent(SmppConnection)}.
     * @param source the source SmppConnection of this event.
     * @param t the exception which caused termination (may be null).
     */
    public ReceiverExitEvent(SmppConnection source, Throwable t)
    {
	super (RECEIVER_EXIT, source);
	this.exception = t;
    }

    /** Create a new ReceiverExitEvent. If <code>t</code> is not null, the newly
     * created event will represent an abnormal termination of the receiver
     * thread. If <code>t</code> is null, this constructor has the same effect
     * as {@link #ReceiverExitEvent(SmppConnection)}.
     * @param source the source SmppConnection of this event.
     * @param t the exception which caused termination (may be null).
     * @param state the state the SmppConnection was in when termination
     * occurred.
     * @see ie.omk.smpp.SmppConnection#BOUND
     * @see ie.omk.smpp.SmppConnection#UNBOUND
     * @see ie.omk.smpp.SmppConnection#BINDING
     * @see ie.omk.smpp.SmppConnection#UNBINDING
     */
    public ReceiverExitEvent(SmppConnection source, Throwable t, int state)
    {
	super (RECEIVER_EXIT, source);
	this.exception = t;
	this.connectionState = state;
    }

    /** Test if this event represents an abnormal termination.
     * @return true if this event represents abnormal termination due to an
     * exception, false if it represents normal termination.
     */
    public boolean isException()
    {
	return (exception != null);
    }

    /** Get the exception that caused termination.
     * @return the exception, or null if this event represents normal
     * termination.
     */
    public Throwable getException()
    {
	return (exception);
    }

    /** Get the state the SmppConnection was in when termination occurred.
     * @return the integer value representing the state of the connection.
     * @see ie.omk.smpp.SmppConnection#BOUND
     * @see ie.omk.smpp.SmppConnection#UNBOUND
     * @see ie.omk.smpp.SmppConnection#BINDING
     * @see ie.omk.smpp.SmppConnection#UNBINDING
     */
    public int getState()
    {
	return (connectionState);
    }
}

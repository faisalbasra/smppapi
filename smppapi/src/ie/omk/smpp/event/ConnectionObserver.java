/*
 * Java SMPP API
 * Copyright (C) 1998 - 2002 by Oran Kelly
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * A copy of the LGPL can be viewed at http://www.gnu.org/copyleft/lesser.html
 * Java SMPP API author: orank@users.sf.net
 * Java SMPP API Homepage: http://smppapi.sourceforge.net/
 * $Id$
 */

package ie.omk.smpp.event;

import ie.omk.smpp.Connection;
import ie.omk.smpp.message.SMPPPacket;

/** A connection observer implementation is used to receive event updates from
 * an Connection object. If an application wishes to use asynchronous
 * communications mode with the API framework, it will need to provide an
 * implementation of this interface to the Connection to be notified of SMPP
 * events (such as packet reception).
 * @see Connection#addObserver
 * @author Oran Kelly
 * @version 1.0
 */
public interface ConnectionObserver
{
    /** Called when a new SMPP packet has been received from the SMSC.
     * This method is called by the API framework whenever an SMPP packet has
     * been read and decoded from the network connection to the SMSC.
     * Identification of the packet type can be achieved by calling
     * {@link SMPPPacket#getCommandId}.
     * @param source the Connection which received the packet.
     * @param packet the SMPP packet received.
     */
    public void packetReceived(Connection source, SMPPPacket packet);


    /** Called for all events <b>other</b> than packet reception. This method is
     * called for all events generated by the API framework <i>except</i> that
     * of a packet received. The {@link #packetReceived} method is called in
     * that case. The <code>update</code> method is mostly used for control
     * events, such as signifying the exit of the receiver thread or notifying
     * of error conditions.
     * @param source the Connection which received the packet.
     * @param event the SMPP event type.
     * @see ie.omk.smpp.event.SMPPEvent#getType
     */
    public void update(Connection source, SMPPEvent event);
}

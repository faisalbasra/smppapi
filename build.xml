<!--  Java SMPP API                                                         -->
<!--  Copyright (C) 1998 - 2005 by Oran Kelly                               -->
<!--  Java SMPP API author: orank@users.sf.net                              -->
<!--  Java SMPP API Homepage: http://smppapi.sourceforge.net/               -->

<!--  $Id$ -->

<project name="smppapi" basedir="." default="all">

    <!-- Load in the build properties -->
    <property file="build.properties" />

    <!-- Any libraries needed to build the base API go in here. -->
    <path id="build.classpath">
        <pathelement location="${lib}/commons-logging.jar" />
    </path>

    <!-- Path for the Emma code coverage utility. -->
    <path id="emma.classpath">
        <fileset dir="${build.lib}">
            <include name="emma.jar"/>
            <include name="emma_ant.jar"/>
        </fileset>
    </path>

    <!-- Classpath for building the test suite -->
    <path id="tests.classpath">
        <pathelement location="${api-build}" />
        <pathelement location="${resources}" />
        <path refid="build.classpath" />
        <pathelement location="${build.lib}/junit.jar" />
        <pathelement location="${lib}/log4j-1.2.5.jar" />
    </path>
        
    <!-- Classpath for running the test suite -->
    <path id="runtests.classpath">
        <pathelement location="${coverage-build}" />
        <pathelement location="${tests-build}" />
        <path refid="tests.classpath"/>
        <path refid="emma.classpath"/>
    </path>
    
    <!-- Classpath for running the checkstyle task. -->
    <path id="checkstyle.classpath">
        <fileset dir="${build.lib}">
            <include name="checkstyle-*.jar"/>
            <include name="commons-beanutils-core.jar"/>
            <include name="commons-cli.jar"/>
            <include name="commons-collections.jar"/>
            <include name="antlr.jar"/>
        </fileset>
        <fileset dir="${lib}">
            <include name="commons-logging.jar"/>
            <include name="log4j-1.2.5.jar"/>
        </fileset>
        <pathelement location="${resources}"/>
    </path>
    
    <taskdef resource="checkstyletask.properties" classpathref="checkstyle.classpath"/>
    <taskdef resource="emma_ant.properties" classpathref="emma.classpath"/>
    
    <target name="init">
        <tstamp />
        <!-- The build assumed you want a debug build unless you override -->
        <!-- this property (or a distribution is being built). -->
        <property name="build.debug" value="true"/>
        
        <!-- Provide a default releaseNumber -->
        <property name="releaseNumber" value="${DSTAMP}"/>
    </target>

    <!-- Build everything: compile the API, examples and tests, run -->
    <!-- Checkstyle, the Unit test suite and generate the code coverage -->
    <!-- report. -->
    <target name="all" depends="init,jars,docs,api-checkstyle,tests,tests-coverage"
            description="Do everything!."/>

    <!-- Build the API -->
    <target name="compile-api" depends="init" description="Compile the API source.">
        <mkdir dir="${api-build}" />
        <javac srcdir="${api-src}" destdir="${api-build}" source="${build.source}" target="${build.target}"
               deprecation="true" debug="${build.debug}">
            <classpath refid="build.classpath" />
        </javac>
    </target>

    <!-- Build the smppapi Jar file -->
    <target name="api-jar" depends="init,compile-api,build-manifest" description="Build the API Jar file.">
        <!-- Set a default Jar name if it has not been previously set -->
        <property name="api-jar" value="${api-name}.jar"/>
        <jar jarfile="${lib}/${api-jar}" manifest="${meta-inf-build}/MANIFEST.MF">
            <fileset dir="${api-build}" />
        </jar>
    </target>
    <target name="build-manifest" depends="init" if="releaseNumber">
        <mkdir dir="${meta-inf-build}"/>
        <copy todir="${meta-inf-build}" file="${meta-inf-src}/MANIFEST.MF">
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
    </target>

    <target name="clean-api" depends="init" description="Clean the API build files.">
        <delete dir="${api-build}" />
        <delete>
            <fileset dir="${lib}" includes="${api-name}*.jar" />
        </delete>
    </target>

    <target name="api-checkstyle" depends="init,run-checkstyle,checkstyle-report" description="Run Checkstyle on the API source."/>
    
    <target name="run-checkstyle" depends="init">
        <mkdir dir="${checkstyle-report-xml}"/>
        <checkstyle config="${tests-src}/checkstyle.xml" failonviolation="false">
            <classpath refid="build.classpath"/>
            <fileset dir="${api-src}" includes="**/*.java"/>
            <formatter type="xml" tofile="${checkstyle-report-xml}/checkstyle-report.xml"/>
        </checkstyle>
    </target>
    
    <target name="checkstyle-report" depends="init" description="Generate the HTML Checkstyle report.">
        <mkdir dir="${checkstyle-report-html}"/>
        <style in="${checkstyle-report-xml}/checkstyle-report.xml"
               out="${checkstyle-report-html}/checkstyle-report.html"
               style="${build.lib}/checkstyle-frames.xsl"/>
        <echo>Checkstyle report is at file://${basedir}/${checkstyle-report-html}/index.html</echo>
    </target>
    
    <!-- Build the javadoc files -->
    <target name="docs" depends="init" description="Generate the API JavaDoc">
        <mkdir dir="${apiDoc}" />
        <javadoc packagenames="ie.omk.smpp.*" destdir="${apiDoc}" Overview="docs/overview.html" protected="true" version="true" author="true" Windowtitle="Java SMPP API documentation" bottom="&lt;font size=-1&gt;&lt;i&gt;&amp;copy; Copyright 2002 by Oran Kelly&lt;/i&gt;&lt;/font&gt;" header="&lt;b&gt;&lt;font size=-1&gt;SMPPAPI&lt;/font&gt;&lt;br&gt;documentation&lt;/b&gt;">
            <fileset dir="${api-src}" />
            <fileset dir="${examples-src}" />
            <classpath>
                <path refid="build.classpath" />
                <pathelement location="${ant.home}/lib/ant.jar" />
            </classpath>
        </javadoc>
    </target>

    <target name="clean-docs" depends="init" description="Clean the generated JavaDoc files.">
        <delete dir="${apiDoc}" />
    </target>

    <!-- Build the examples -->
    <target name="compile-examples" depends="init,compile-api" description="Compile the examples source.">
        <mkdir dir="${examples-build}" />
        <javac srcdir="${examples-src}" destdir="${examples-build}" source="${build.source}" target="${build.target}"
               deprecation="true" debug="true">
            <classpath>
                <path refid="build.classpath" />
                <pathelement location="${api-build}" />
                <pathelement location="${ant.home}/lib/ant.jar" />
            </classpath>
        </javac>
    </target>

    <target name="clean-examples" depends="init" description="Clean up the examples build files.">
        <delete dir="${examples-build}" />
        <delete file="${lib}/${examples-jar}" />
    </target>

    <!-- Build the examples jar -->
    <target name="examples-jar" depends="init,compile-examples,api-jar" description="Build the examples Jar file.">
        <jar jarfile="${lib}/${examples-jar}">
            <fileset dir="${examples-build}" />
        </jar>
    </target>


    <!-- Build the tests -->
    <target name="compile-tests" depends="init,compile-api" description="Compile the unit test source.">
        <mkdir dir="${tests-build}" />
        <javac srcdir="${tests-src}" destdir="${tests-build}" source="${build.source}" target="${build.target}"
               deprecation="true" debug="true">
            <classpath refid="tests.classpath"/>
        </javac>
    </target>

    <target name="clean-tests" depends="init" description="Clean up the tests build files.">
        <delete dir="${tests-build}" />
    </target>


    <target name="tests" depends="init,run-testsuite,tests-report" description="Run the unit test suite"/>

    <target name="run-testsuite" depends="init,compile-api,compile-tests">
        <mkdir dir="${tests-report-xml}"/>
        <junit fork="true" dir="${basedir}">
            <classpath refid="runtests.classpath"/>
            <jvmarg value="-Demma.coverage.out.file=${coverage-report-raw}/coverage.emma" />
            <jvmarg value="-Demma.coverage.out.merge=true" />
            <batchtest todir="${tests-report-xml}">
                <fileset dir="${tests-build}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
            <formatter type="xml"/>
            <assertions>
                <enable/>
            </assertions>
        </junit>
    </target>
    
    <target name="tests-report" description="Generate HTML unit test report">
        <mkdir dir="${tests-report-html}"/>
        <junitreport todir="${tests-report-xml}">
            <fileset dir="${tests-report-xml}">
                <include name="**/TEST-*.xml"/>
                <exclude name="TEST-TestSuites.xml"/>
            </fileset>
            <report format="frames" todir="${tests-report-html}"/>
        </junitreport>
        <echo>Unit test report is at file://${basedir}/${tests-report-html}/index.html</echo>
    </target>

    <!-- Unit test suite instrumentation tasks -->
    <target name="coverage-instrumentation" depends="init,compile-api">
        <mkdir dir="${coverage-build}"/>
        <mkdir dir="${coverage-report-raw}"/>
        <emma enabled="true">
            <instr instrpath="${api-build}" destdir="${coverage-build}"
                metadatafile="${coverage-report-raw}/metadata.emma" merge="false"/>
        </emma>
    </target>
    
    <target name="coverage-report" depends="init">
        <delete dir="${coverage-report-html}"/>
        <mkdir dir="${coverage-report-html}"/>
        <emma enabled="true">
            <report sourcepath="${api-src}">
                <fileset dir="${coverage-report-raw}" includes="**/*.emma"/>
                <html outfile="${coverage-report-html}/coverage.html"/>
            </report>
        </emma>
        <echo>Coverage report is at file://${basedir}/${coverage-report-html}/coverage.html</echo>
    </target>
    
    <target name="tests-coverage" depends="init,coverage-instrumentation"
            description="Generate the unit test coverage report.">
        <antcall target="run-testsuite"/>
        <antcall target="coverage-report"/>
    </target>
    
    <!-- Build the project jar files -->
    <target name="jars" depends="init,api-jar,examples-jar" description="Build all project Jars"/>

    <target name="clean-jars" description="Clean up all generated Jar files">
        <delete>
            <fileset dir="${lib}">
                <include name="${examples-jar}" />
                <include name="${api-jar}" />
            </fileset>
        </delete>
    </target>

    <!-- Build the distribution. -->
    <!-- This doesn't depend on init so that we can turn off debug building. -->
    <target name="dist" description="Build a release">
        <fail unless="releaseNumber">
        You must supply a value for the "releaseNumber" property.
        </fail>

        <property name="build.debug" value="false"/>
        <property name="releaseDir" value="${dist}/smppapi-${releaseNumber}"/>
        <property name="api-jar" value="${api-name}-${releaseNumber}.jar"/>
        <antcall target="dist-internal"/>
    </target>
    
    <target name="dist-internal" depends="init,really-clean,jars,docs">
        <mkdir dir="${releaseDir}" />

        <!-- Output Java build version info -->
        <echo level="info" file="${releaseDir}/BUILDINFO">
This SMPPAPI distribution was built on the following:
JRE version: ${java.version}
JRE vendor: ${java.vendor} (${java.vendor.url})
Built on: ${os.name} ${os.version} architecture: ${os.arch}
        </echo>

        <copy todir="${releaseDir}" includeemptydirs="no">
            <fileset dir="." defaultexcludes="true">
                <exclude name="${build}/**" />
                <exclude name="${dist}/**" />
                <!-- Vim swap files -->
                <exclude name="**/.*.sw?" />
            </fileset>
        </copy>

        <tar tarfile="${dist}/smppapi-${releaseNumber}.tar" basedir="${releaseDir}" />
        <gzip src="${dist}/smppapi-${releaseNumber}.tar" zipfile="${dist}/smppapi-${releaseNumber}.tar.gz" />
        <delete file="${dist}/smppapi-${releaseNumber}.tar" />
    </target>

    <target name="clean-dist" depends="init" description="Clean up the distribution directory">
        <delete dir="${dist}" />
    </target>

    <!-- Clean up -->
    <target name="clean" depends="init,clean-dist,clean-docs,clean-tests,clean-examples,clean-api"
            description="Clean up all build files.">
        <delete dir="${build}" />
    </target>

    <!-- Clean everything, including any editor backup files etc. -->
    <target name="really-clean" depends="init,clean" description="Clean up all build files as well as any editor backups.">
        <delete>
            <fileset dir="." defaultexcludes="no">
                <include name="**/*~"/>
                <include name="**/*.bak"/>
                <include name="**/*-old"/>
            </fileset>
        </delete>
    </target>

    <target name="update-changelog" depends="init" description="Run the cvs2cl utility to update the ChangeLog.">
        <exec executable="cvs2cl">
            <arg value="--tags" />
            <arg value="--separate-header"/>
            <arg value="--utc"/>
            <arg value="--prune"/>
        </exec>
    </target>
</project>
